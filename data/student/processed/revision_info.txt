arguments: app-gui.py
--------------------
tensorflow version: 2.11.0
--------------------
git hash: b'9c81e69fd384d2ef884820592d4d0392b9fe5090'
--------------------
b'diff --git a/Detector.py b/Detector.py\nindex 4db826c..0896348 100644\n--- a/Detector.py\n+++ b/Detector.py\n@@ -7,7 +7,7 @@ def main_app(name):\n         face_cascade = cv2.CascadeClassifier(\'./data/haarcascade_frontalface_default.xml\')\r\n         recognizer = cv2.face.LBPHFaceRecognizer_create()\r\n         recognizer.read(f"./data/classifiers/{name}_classifier.xml")\r\n-        cap = cv2.VideoCapture(0)\r\n+        cap = cv2.VideoCapture(1)\r\n         pred = 0\r\n         while True:\r\n             ret, frame = cap.read()\r\ndiff --git a/app-gui.py b/app-gui.py\nindex 0f64293..c53ccc6 100644\n--- a/app-gui.py\n+++ b/app-gui.py\n@@ -1,11 +1,14 @@\n from Detector import main_app\r\n-from create_classifier import train_classifer\r\n+from create_classifier import train_classifer, regFaces\r\n from create_dataset import start_capture\r\n import tkinter as tk\r\n from tkinter import font as tkfont\r\n-from tkinter import messagebox,PhotoImage\r\n-#from PIL import ImageTk, Image\r\n-#from gender_prediction import emotion,ageAndgender\r\n+from tkinter import messagebox, PhotoImage\r\n+from PIL import Image, ImageTk\r\n+import cv2\r\n+import os\r\n+# from PIL import ImageTk, Image\r\n+# from gender_prediction import emotion,ageAndgender\r\n names = set()\r\n \r\n \r\n@@ -14,23 +17,34 @@ class MainUI(tk.Tk):\n     def __init__(self, *args, **kwargs):\r\n         tk.Tk.__init__(self, *args, **kwargs)\r\n         global names\r\n+        global open_webcam\r\n+        open_webcam = \'false\'\r\n         with open("nameslist.txt", "r") as f:\r\n             x = f.read()\r\n             z = x.rstrip().split(" ")\r\n             for i in z:\r\n                 names.add(i)\r\n-        self.title_font = tkfont.Font(family=\'Helvetica\', size=16, weight="bold")\r\n+        self.title_font = tkfont.Font(\r\n+            family=\'Helvetica\', size=16, weight="bold")\r\n         self.title("Face Recognizer")\r\n         self.resizable(False, False)\r\n-        self.geometry("500x250")\r\n+        app_width = 1200\r\n+        app_height = 600\r\n+        screen_width = self.winfo_screenwidth()\r\n+        screen_height = self.winfo_screenheight()\r\n+\r\n+        x = (screen_width / 2) - (app_width / 2)\r\n+        y = (screen_height / 2) - (app_height / 2)\r\n+\r\n+        self.geometry(f\'{app_width}x{app_height}+{int(x)}+{int(y)}\')\r\n         self.protocol("WM_DELETE_WINDOW", self.on_closing)\r\n         self.active_name = None\r\n         container = tk.Frame(self)\r\n-        container.grid(sticky="nsew")\r\n+        container.place(relx=0.5, rely=0.5, anchor=\'center\')\r\n         container.grid_rowconfigure(0, weight=1)\r\n         container.grid_columnconfigure(0, weight=1)\r\n         self.frames = {}\r\n-        for F in (StartPage, PageOne, PageTwo, PageThree, PageFour):\r\n+        for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageTakeFace):\r\n             page_name = F.__name__\r\n             frame = F(parent=container, controller=self)\r\n             self.frames[page_name] = frame\r\n@@ -38,76 +52,100 @@ class MainUI(tk.Tk):\n         self.show_frame("StartPage")\r\n \r\n     def show_frame(self, page_name):\r\n-            frame = self.frames[page_name]\r\n-            frame.tkraise()\r\n+        frame = self.frames[page_name]\r\n+        frame.tkraise()\r\n \r\n     def on_closing(self):\r\n \r\n         if messagebox.askokcancel("Quit", "Are you sure?"):\r\n             global names\r\n-            f =  open("nameslist.txt", "a+")\r\n+            f = open("nameslist.txt", "a+")\r\n             for i in names:\r\n-                    f.write(i+" ")\r\n+                f.write(i+" ")\r\n             self.destroy()\r\n \r\n \r\n class StartPage(tk.Frame):\r\n \r\n-        def __init__(self, parent, controller):\r\n-            tk.Frame.__init__(self, parent)\r\n-            self.controller = controller\r\n-            #load = Image.open("homepagepic.png")\r\n-            #load = load.resize((250, 250), Image.ANTIALIAS)\r\n-            render = PhotoImage(file=\'homepagepic.png\')\r\n-            img = tk.Label(self, image=render)\r\n-            img.image = render\r\n-            img.grid(row=0, column=1, rowspan=4, sticky="nsew")\r\n-            label = tk.Label(self, text="        Home Page        ", font=self.controller.title_font,fg="#263942")\r\n-            label.grid(row=0, sticky="ew")\r\n-            button1 = tk.Button(self, text="   Add a User  ", fg="#ffffff", bg="#263942",command=lambda: self.controller.show_frame("PageOne"))\r\n-            button2 = tk.Button(self, text="   Check a User  ", fg="#ffffff", bg="#263942",command=lambda: self.controller.show_frame("PageTwo"))\r\n-            button3 = tk.Button(self, text="Quit", fg="#263942", bg="#ffffff", command=self.on_closing)\r\n-            button1.grid(row=1, column=0, ipady=3, ipadx=7)\r\n-            button2.grid(row=2, column=0, ipady=3, ipadx=2)\r\n-            button3.grid(row=3, column=0, ipady=3, ipadx=32)\r\n-\r\n-\r\n-        def on_closing(self):\r\n-            if messagebox.askokcancel("Quit", "Are you sure?"):\r\n-                global names\r\n-                with open("nameslist.txt", "w") as f:\r\n-                    for i in names:\r\n-                        f.write(i + " ")\r\n-                self.controller.destroy()\r\n+    def __init__(self, parent, controller):\r\n+        tk.Frame.__init__(self, parent)\r\n+        self.controller = controller\r\n+\r\n+        load1 = Image.open("Touch_ID.png")\r\n+        load1 = load1.resize((250, 250), Image.ANTIALIAS)\r\n+        render1 = PhotoImage(file=\'Touch_ID.png\')\r\n+\r\n+        render1 = ImageTk.PhotoImage(Image.open(\r\n+            "Touch_ID.png").resize((250, 250), Image.ANTIALIAS))\r\n+\r\n+        button4 = tk.Button(\r\n+            self, image=render1)\r\n+        button4.image = render1\r\n+        button4.grid(row=0, column=0, rowspan=4,\r\n+                     padx=10, pady=12, sticky="nsew")\r\n+\r\n+        load2 = Image.open("face-id-id.png")\r\n+        load2 = load2.resize((50, 50), Image.ANTIALIAS)\r\n+        render2 = PhotoImage(file=\'face-id-id.png\')\r\n+\r\n+        render2 = ImageTk.PhotoImage(Image.open(\r\n+            "face-id-id.png").resize((250, 250), Image.ANTIALIAS))\r\n+\r\n+        button5 = tk.Button(\r\n+            self, image=render2, command=lambda: self.controller.show_frame("PageOne"))\r\n+        button5.image = render2\r\n+        button5.grid(row=1, column=1, rowspan=4,\r\n+                     padx=10, pady=12, sticky="nsew")\r\n+\r\n+    def on_closing(self):\r\n+        if messagebox.askokcancel("Quit", "Are you sure?"):\r\n+            global names\r\n+            with open("nameslist.txt", "w") as f:\r\n+                for i in names:\r\n+                    f.write(i + " ")\r\n+            self.controller.destroy()\r\n \r\n \r\n class PageOne(tk.Frame):\r\n     def __init__(self, parent, controller):\r\n         tk.Frame.__init__(self, parent)\r\n         self.controller = controller\r\n-        tk.Label(self, text="Enter the name", fg="#263942", font=\'Helvetica 12 bold\').grid(row=0, column=0, pady=10, padx=5)\r\n-        self.user_name = tk.Entry(self, borderwidth=3, bg="lightgrey", font=\'Helvetica 11\')\r\n-        self.user_name.grid(row=0, column=1, pady=10, padx=10)\r\n-        self.buttoncanc = tk.Button(self, text="Cancel", bg="#ffffff", fg="#263942", command=lambda: controller.show_frame("StartPage"))\r\n-        self.buttonext = tk.Button(self, text="Next", fg="#ffffff", bg="#263942", command=self.start_training)\r\n-        self.buttoncanc.grid(row=1, column=0, pady=10, ipadx=5, ipady=4)\r\n-        self.buttonext.grid(row=1, column=1, pady=10, ipadx=5, ipady=4)\r\n-    def start_training(self):\r\n-        global names\r\n-        if self.user_name.get() == "None":\r\n-            messagebox.showerror("Error", "Name cannot be \'None\'")\r\n-            return\r\n-        elif self.user_name.get() in names:\r\n-            messagebox.showerror("Error", "User already exists!")\r\n-            return\r\n-        elif len(self.user_name.get()) == 0:\r\n-            messagebox.showerror("Error", "Name cannot be empty!")\r\n-            return\r\n-        name = self.user_name.get()\r\n-        names.add(name)\r\n-        self.controller.active_name = name\r\n-        self.controller.frames["PageTwo"].refresh_names()\r\n-        self.controller.show_frame("PageThree")\r\n+\r\n+        color1 = \'#020f12\'\r\n+        color2 = \'#05d7ff\'\r\n+        color3 = \'#65e7ff\'\r\n+        color4 = \'BLACK\'\r\n+        color5 = \'YELLOW\'\r\n+        self.buttoncanc = tk.Button(self,\r\n+                                    background=color2,\r\n+                                    foreground=color4,\r\n+                                    activebackground=color3,\r\n+                                    activeforeground=color4,\r\n+                                    highlightthickness=2,\r\n+                                    highlightbackground=color2,\r\n+                                    width=15,\r\n+                                    height=2,\r\n+                                    border=0,\r\n+                                    cursor=\'hand2\',\r\n+                                    text="Cancel",\r\n+                                    font=(\'Arial\', 16, \'bold\'),\r\n+                                    command=lambda: controller.show_frame("StartPage"))\r\n+        self.buttoncanc.place(relx=0.5, rely=0.5, anchor=\'center\')\r\n+\r\n+        self.buttonTakeFace = tk.Button(self,\r\n+                                        background=color2,\r\n+                                        foreground=color4,\r\n+                                        activebackground=color3,\r\n+                                        activeforeground=color4,\r\n+                                        highlightthickness=2,\r\n+                                        highlightbackground=color2,\r\n+                                        width=15,\r\n+                                        height=2,\r\n+                                        border=0,\r\n+                                        cursor=\'hand2\',\r\n+                                        text="Add new",\r\n+                                        font=(\'Arial\', 16, \'bold\'), command=lambda: controller.show_frame("PageTakeFace"))\r\n+        self.buttonTakeFace.place(relx=0.5, rely=0.3, anchor=\'center\')\r\n \r\n \r\n class PageTwo(tk.Frame):\r\n@@ -116,13 +154,16 @@ class PageTwo(tk.Frame):\n         tk.Frame.__init__(self, parent)\r\n         global names\r\n         self.controller = controller\r\n-        tk.Label(self, text="Select user", fg="#263942", font=\'Helvetica 12 bold\').grid(row=0, column=0, padx=10, pady=10)\r\n-        self.buttoncanc = tk.Button(self, text="Cancel", command=lambda: controller.show_frame("StartPage"), bg="#ffffff", fg="#263942")\r\n+        tk.Label(self, text="Select user", fg="#263942", font=\'Helvetica 12 bold\').grid(\r\n+            row=0, column=0, padx=10, pady=10)\r\n+        self.buttoncanc = tk.Button(self, text="Cancel", command=lambda: controller.show_frame(\r\n+            "StartPage"), bg="#ffffff", fg="#263942")\r\n         self.menuvar = tk.StringVar(self)\r\n         self.dropdown = tk.OptionMenu(self, self.menuvar, *names)\r\n         self.dropdown.config(bg="lightgrey")\r\n         self.dropdown["menu"].config(bg="lightgrey")\r\n-        self.buttonext = tk.Button(self, text="Next", command=self.nextfoo, fg="#ffffff", bg="#263942")\r\n+        self.buttonext = tk.Button(\r\n+            self, text="Next", command=self.nextfoo, fg="#ffffff", bg="#263942")\r\n         self.dropdown.grid(row=0, column=1, ipadx=8, padx=10, pady=10)\r\n         self.buttoncanc.grid(row=1, ipadx=5, ipady=4, column=0, pady=10)\r\n         self.buttonext.grid(row=1, ipadx=5, ipady=4, column=1, pady=10)\r\n@@ -139,34 +180,36 @@ class PageTwo(tk.Frame):\n         self.menuvar.set(\'\')\r\n         self.dropdown[\'menu\'].delete(0, \'end\')\r\n         for name in names:\r\n-            self.dropdown[\'menu\'].add_command(label=name, command=tk._setit(self.menuvar, name))\r\n+            self.dropdown[\'menu\'].add_command(\r\n+                label=name, command=tk._setit(self.menuvar, name))\r\n+\r\n \r\n class PageThree(tk.Frame):\r\n \r\n     def __init__(self, parent, controller):\r\n         tk.Frame.__init__(self, parent)\r\n         self.controller = controller\r\n-        self.numimglabel = tk.Label(self, text="Number of images captured = 0", font=\'Helvetica 12 bold\', fg="#263942")\r\n-        self.numimglabel.grid(row=0, column=0, columnspan=2, sticky="ew", pady=10)\r\n-        self.capturebutton = tk.Button(self, text="Capture Data Set", fg="#ffffff", bg="#263942", command=self.capimg)\r\n-        self.trainbutton = tk.Button(self, text="Train The Model", fg="#ffffff", bg="#263942",command=self.trainmodel)\r\n-        self.capturebutton.grid(row=1, column=0, ipadx=5, ipady=4, padx=10, pady=20)\r\n-        self.trainbutton.grid(row=1, column=1, ipadx=5, ipady=4, padx=10, pady=20)\r\n+        self.numimglabel = tk.Label(\r\n+            self, text="Number of images captured = 0", font=\'Helvetica 12 bold\', fg="#263942")\r\n+        self.numimglabel.grid(\r\n+            row=0, column=0, columnspan=2, sticky="ew", pady=10)\r\n+        # self.capturebutton = tk.Button(\r\n+        #     self, text="Capture Data Set", fg="#ffffff", bg="#263942", command=self.capimg)\r\n+        # self.trainbutton = tk.Button(\r\n+        #     self, text="Train The Model", fg="#ffffff", bg="#263942", command=self.trainmodel)\r\n+        # self.capturebutton.grid(row=1, column=0, ipadx=5,\r\n+        #                         ipady=4, padx=10, pady=20)\r\n+        # self.trainbutton.grid(row=1, column=1, ipadx=5,\r\n+        #                       ipady=4, padx=10, pady=20)\r\n \r\n     def capimg(self):\r\n         self.numimglabel.config(text=str("Captured Images = 0 "))\r\n-        messagebox.showinfo("INSTRUCTIONS", "We will Capture 300 pic of your Face.")\r\n+        messagebox.showinfo(\r\n+            "INSTRUCTIONS", "We will Capture 300 pic of your Face.")\r\n         x = start_capture(self.controller.active_name)\r\n         self.controller.num_of_images = x\r\n-        self.numimglabel.config(text=str("Number of images captured = "+str(x)))\r\n-\r\n-    def trainmodel(self):\r\n-        if self.controller.num_of_images < 300:\r\n-            messagebox.showerror("ERROR", "No enough Data, Capture at least 300 images!")\r\n-            return\r\n-        train_classifer(self.controller.active_name)\r\n-        messagebox.showinfo("SUCCESS", "The modele has been successfully trained!")\r\n-        self.controller.show_frame("PageFour")\r\n+        self.numimglabel.config(\r\n+            text=str("Number of images captured = "+str(x)))\r\n \r\n \r\n class PageFour(tk.Frame):\r\n@@ -175,27 +218,171 @@ class PageFour(tk.Frame):\n         tk.Frame.__init__(self, parent)\r\n         self.controller = controller\r\n \r\n-        label = tk.Label(self, text="Face Recognition", font=\'Helvetica 16 bold\')\r\n-        label.grid(row=0,column=0, sticky="ew")\r\n-        button1 = tk.Button(self, text="Face Recognition", command=self.openwebcam, fg="#ffffff", bg="#263942")\r\n-        #button2 = tk.Button(self, text="Emotion Detection", command=self.emot, fg="#ffffff", bg="#263942")\r\n-        #button3 = tk.Button(self, text="Gender and Age Prediction", command=self.gender_age_pred, fg="#ffffff", bg="#263942")\r\n-        button4 = tk.Button(self, text="Go to Home Page", command=lambda: self.controller.show_frame("StartPage"), bg="#ffffff", fg="#263942")\r\n-        button1.grid(row=1,column=0, sticky="ew", ipadx=5, ipady=4, padx=10, pady=10)\r\n-        #button2.grid(row=1,column=1, sticky="ew", ipadx=5, ipady=4, padx=10, pady=10)\r\n-        #button3.grid(row=2,column=0, sticky="ew", ipadx=5, ipady=4, padx=10, pady=10)\r\n-        button4.grid(row=1,column=1, sticky="ew", ipadx=5, ipady=4, padx=10, pady=10)\r\n+        label = tk.Label(self, text="Face Recognition",\r\n+                         font=\'Helvetica 16 bold\')\r\n+        label.grid(row=0, column=0, sticky="ew")\r\n+        button1 = tk.Button(self, text="Face Recognition",\r\n+                            command=self.openwebcam, fg="#ffffff", bg="#263942")\r\n+        # button2 = tk.Button(self, text="Emotion Detection", command=self.emot, fg="#ffffff", bg="#263942")\r\n+        # button3 = tk.Button(self, text="Gender and Age Prediction", command=self.gender_age_pred, fg="#ffffff", bg="#263942")\r\n+        button4 = tk.Button(self, text="Go to Home Page", command=lambda: self.controller.show_frame(\r\n+            "StartPage"), bg="#ffffff", fg="#263942")\r\n+        button1.grid(row=1, column=0, sticky="ew",\r\n+                     ipadx=5, ipady=4, padx=10, pady=10)\r\n+        # button2.grid(row=1,column=1, sticky="ew", ipadx=5, ipady=4, padx=10, pady=10)\r\n+        # button3.grid(row=2,column=0, sticky="ew", ipadx=5, ipady=4, padx=10, pady=10)\r\n+        button4.grid(row=1, column=1, sticky="ew",\r\n+                     ipadx=5, ipady=4, padx=10, pady=10)\r\n \r\n     def openwebcam(self):\r\n         main_app(self.controller.active_name)\r\n-    #def gender_age_pred(self):\r\n+    # def gender_age_pred(self):\r\n      #  ageAndgender()\r\n-    #def emot(self):\r\n+    # def emot(self):\r\n      #   emotion()\r\n \r\n \r\n+num_of_images = 0\r\n+\r\n+\r\n+class PageTakeFace(tk.Frame):\r\n+    def __init__(self, parent, controller):\r\n+        tk.Frame.__init__(self, parent)\r\n+        self.controller = controller\r\n+\r\n+        global cam_on\r\n+        cam_on = False\r\n+        global cap\r\n+        cap = None\r\n+        # student_id = \'_\'.join([\'student\', stundent_id_entry])\r\n+\r\n+        def display_frame():\r\n+            global cam_on\r\n+            global num_of_images\r\n+            detector = cv2.CascadeClassifier(\r\n+                "./data/haarcascade_frontalface_default.xml")\r\n+\r\n+            filepath = \'./data/student/raw/\' + stundent_id_entry.get()\r\n+\r\n+            isExist = os.path.exists(filepath)\r\n+\r\n+            if not isExist:\r\n+                print(\'The new directory is created!\')\r\n+                print(filepath)\r\n+                os.makedirs(filepath)\r\n+\r\n+            if cam_on:\r\n+\r\n+                ret, frame = cap.read()\r\n+\r\n+                if ret:\r\n+                    opencv_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)\r\n+                    filename = \'.\'.join([str(num_of_images), \'jpg\'])\r\n+                    path = os.path.join(filepath, filename)\r\n+                    cv2.imwrite(path, frame)\r\n+                    face = detector.detectMultiScale(\r\n+                        image=opencv_image, scaleFactor=1.1, minNeighbors=5)\r\n+                    for x, y, w, h in face:\r\n+                        cv2.rectangle(frame, (x, y),\r\n+                                      (x+w, y+h), (8, 238, 255), 2)\r\n+                        cv2.putText(frame, "Face Detected", (x, y-5),\r\n+                                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (8, 238, 255))\r\n+                        cv2.putText(frame, str(str(num_of_images)+" images captured"),\r\n+                                    (x, y+h+20), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (8, 238, 255))\r\n+                        # new_img = frame[y:y+h, x:x+w]\r\n+\r\n+                    # Capture the latest frame and transform to image\r\n+                    captured_image = Image.fromarray(\r\n+                        cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA))\r\n+\r\n+                    # Convert captured image to photoimage\r\n+                    photo_image = ImageTk.PhotoImage(\r\n+                        captured_image.resize((500, 300), Image.ANTIALIAS))\r\n+\r\n+                    # Displaying photoimage in the label\r\n+                    label_widget.photo_image = photo_image\r\n+\r\n+                    # Configure image in the label\r\n+                    label_widget.configure(image=photo_image)\r\n+\r\n+                    # Repeat the same process after every 10 seconds\r\n+                    num_of_images += 1\r\n+\r\n+                    if num_of_images == 21:\r\n+                        stop_vid()\r\n+                        num_of_images = 0\r\n+                        messagebox.showinfo(\r\n+                            "INSTRUCTIONS", "We captured 20 pic of your Face.")\r\n+                        return \'ok\'\r\n+\r\n+                label_widget.after(10, display_frame)\r\n+\r\n+        def start_vid():\r\n+            global cam_on, cap\r\n+            stop_vid()\r\n+            cam_on = True\r\n+            cap = cv2.VideoCapture(1)\r\n+            display_frame()\r\n+\r\n+        def stop_vid():\r\n+            label_widget.configure(image=None)\r\n+            label_widget.configure(image="")\r\n+\r\n+            global cam_on\r\n+            cam_on = False\r\n+\r\n+            if cap:\r\n+                cap.release()\r\n+\r\n+        def trainmodel():\r\n+            # if self.controller.num_of_images < 300:\r\n+            #     messagebox.showerror(\r\n+            #         "ERROR", "No enough Data, Capture at least 300 images!")\r\n+            #     return\r\n+            regFaces()\r\n+            messagebox.showinfo(\r\n+                "SUCCESS", "You can now implement your detection")\r\n+\r\n+        ####### take face screen #######\r\n+\r\n+        user_info_frame = tk.LabelFrame(self, text="User Information")\r\n+        user_info_frame.grid(row=0, column=0, padx=20, pady=10)\r\n+\r\n+        first_name_label = tk.Label(user_info_frame, text="Your Name")\r\n+        first_name_label.grid(row=0, column=0)\r\n+        student_id_label = tk.Label(user_info_frame, text="Your Student Id")\r\n+        student_id_label.grid(row=0, column=1)\r\n+\r\n+        first_name_entry = tk.Entry(user_info_frame)\r\n+        stundent_id_entry = tk.Entry(user_info_frame)\r\n+        first_name_entry.grid(row=1, column=0)\r\n+        stundent_id_entry.grid(row=1, column=1)\r\n+\r\n+        buttoncanc = tk.Button(user_info_frame, text="Cancel", bg="#ffffff",\r\n+                               fg="#263942", command=lambda: controller.show_frame("StartPage"))\r\n+        buttoncanc.grid(row=2, column=0, pady=10, ipadx=5, ipady=4)\r\n+\r\n+        buttoncanc = tk.Button(user_info_frame, text="Confirm", bg="#ffffff",\r\n+                               fg="#263942", command=start_vid)\r\n+        buttoncanc.grid(row=2, column=1, pady=10, ipadx=5, ipady=4)\r\n+\r\n+        label_widget = tk.Label(self)\r\n+        label_widget.grid(row=3, column=0)\r\n+\r\n+        # age_label = tk.Label(user_info_frame, text="Age")\r\n+        # age_spinbox = tk.Spinbox(user_info_frame, from_=18, to=110)\r\n+        # age_label.grid(row=2, column=0)\r\n+        # age_spinbox.grid(row=3, column=0)\r\n+\r\n+        for widget in user_info_frame.winfo_children():\r\n+            widget.grid_configure(padx=10, pady=5)\r\n+\r\n+        button1 = tk.Button(self, text="Training Model",\r\n+                            command=trainmodel)\r\n+        button1.grid(row=8, column=0, padx=10,\r\n+                     pady=10, ipadx=5, ipady=4)\r\n+\r\n \r\n app = MainUI()\r\n app.iconphoto(False, tk.PhotoImage(file=\'icon.ico\'))\r\n app.mainloop()\r\n-\r\ndiff --git a/create_classifier.py b/create_classifier.py\nindex a022cf5..9a16c5e 100644\n--- a/create_classifier.py\n+++ b/create_classifier.py\n@@ -1,10 +1,60 @@\n import numpy as np\r\n from PIL import Image\r\n-import os, cv2\r\n+import os\r\n+import cv2\r\n+from Helper.align_dataset_mtcnn import main\r\n+from Helper.classifier import mainTrain\r\n \r\n \r\n+def regFaces():\r\n+    input_dir = \'data/student/raw\'\r\n+    output_dir = \'data/student/processed\'\r\n+    image_size = 160\r\n+    margin = 32\r\n+    random_order = \'random_order\'\r\n+    gpu_memory_fraction = 0.25\r\n+    args = {\r\n+        \'input_dir\': input_dir,\r\n+        \'output_dir\': output_dir,\r\n+        \'image_size\': image_size,\r\n+        \'margin\': margin,\r\n+        \'random_order\': random_order,\r\n+        \'gpu_memory_fraction\': gpu_memory_fraction,\r\n+        \'detect_multiple_faces\': False\r\n+    }\r\n+    print(args[\'output_dir\'])\r\n+    data = main(args)\r\n \r\n+    if data == \'ok\':\r\n+        startTraining(data)\r\n+\r\n+    # data = \'complete reg faces\'\r\n+    return\r\n # Method to train custom classifier to recognize face\r\n+\r\n+\r\n+def startTraining(data):\r\n+    os.remove(\'model/facemodel.pkl\')\r\n+    # message = request.form[\'status\']\r\n+    if data == \'ok\':\r\n+        data_dir = \'data/student/processed\'\r\n+        # test_data = \'backend/data/test/align\'\r\n+        args = {\r\n+            \'mode\': \'TRAIN\',\r\n+            \'data_dir\': data_dir,\r\n+            \'model\': \'model/20180402-114759.pb\',\r\n+            \'classifier_filename\': \'model/facemodel.pkl\',\r\n+            \'use_split_dataset\': \'store_true\',\r\n+            \'batch_size\': 1000,\r\n+            \'image_size\': 160,\r\n+            \'seed\': 666,\r\n+            \'min_nrof_images_per_class\': 20,\r\n+            \'nrof_train_images_per_class\': 15}\r\n+        mainTrain(args)\r\n+        data = \'complete trained\'\r\n+        return\r\n+\r\n+\r\n def train_classifer(name):\r\n     # Read all the images in custom data-set\r\n     path = os.path.join(os.getcwd()+"/data/"+name+"/")\r\n@@ -14,27 +64,24 @@ def train_classifer(name):\n     labels = []\r\n     pictures = {}\r\n \r\n-\r\n     # Store images in a numpy format and ids of the user on the same index in imageNp and id lists\r\n \r\n-    for root,dirs,files in os.walk(path):\r\n-            pictures = files\r\n+    for root, dirs, files in os.walk(path):\r\n+        pictures = files\r\n \r\n+    for pic in pictures:\r\n \r\n-    for pic in pictures :\r\n-\r\n-            imgpath = path+pic\r\n-            img = Image.open(imgpath).convert(\'L\')\r\n-            imageNp = np.array(img, \'uint8\')\r\n-            id = int(pic.split(name)[0])\r\n-            #names[name].append(id)\r\n-            faces.append(imageNp)\r\n-            ids.append(id)\r\n+        imgpath = path+pic\r\n+        img = Image.open(imgpath).convert(\'L\')\r\n+        imageNp = np.array(img, \'uint8\')\r\n+        id = int(pic.split(name)[0])\r\n+        # names[name].append(id)\r\n+        faces.append(imageNp)\r\n+        ids.append(id)\r\n \r\n     ids = np.array(ids)\r\n \r\n-    #Train and save classifier\r\n+    # Train and save classifier\r\n     clf = cv2.face.LBPHFaceRecognizer_create()\r\n     clf.train(faces, ids)\r\n     clf.write("./data/classifiers/"+name+"_classifier.xml")\r\n-\r\ndiff --git a/create_dataset.py b/create_dataset.py\nindex 1fbeab1..fbc4f04 100644\n--- a/create_dataset.py\n+++ b/create_dataset.py\n@@ -1,38 +1,41 @@\n import cv2\r\n import os\r\n \r\n-def start_capture(name):\r\n-        path = "./data/" + name\r\n-        num_of_images = 0\r\n-        detector = cv2.CascadeClassifier("./data/haarcascade_frontalface_default.xml")\r\n-        try:\r\n-            os.makedirs(path)\r\n-        except:\r\n-            print(\'Directory Already Created\')\r\n-        vid = cv2.VideoCapture(0)\r\n-        while True:\r\n-\r\n-            ret, img = vid.read()\r\n-            new_img = None\r\n-            grayimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n-            face = detector.detectMultiScale(image=grayimg, scaleFactor=1.1, minNeighbors=5)\r\n-            for x, y, w, h in face:\r\n-                cv2.rectangle(img, (x, y), (x+w, y+h), (0, 0, 0), 2)\r\n-                cv2.putText(img, "Face Detected", (x, y-5), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255))\r\n-                cv2.putText(img, str(str(num_of_images)+" images captured"), (x, y+h+20), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255))\r\n-                new_img = img[y:y+h, x:x+w]\r\n-            cv2.imshow("FaceDetection", img)\r\n-            key = cv2.waitKey(1) & 0xFF\r\n \r\n+def start_capture(name):\r\n+    path = "./data/" + name\r\n+    num_of_images = 0\r\n+    detector = cv2.CascadeClassifier(\r\n+        "./data/haarcascade_frontalface_default.xml")\r\n+    try:\r\n+        os.makedirs(path)\r\n+    except:\r\n+        print(\'Directory Already Created\')\r\n+    vid = cv2.VideoCapture(1)\r\n+    while True:\r\n \r\n-            try :\r\n-                cv2.imwrite(str(path+"/"+str(num_of_images)+name+".jpg"), new_img)\r\n-                num_of_images += 1\r\n-            except :\r\n+        ret, img = vid.read()\r\n+        new_img = None\r\n+        grayimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n+        face = detector.detectMultiScale(\r\n+            image=grayimg, scaleFactor=1.1, minNeighbors=5)\r\n+        for x, y, w, h in face:\r\n+            cv2.rectangle(img, (x, y), (x+w, y+h), (0, 0, 0), 2)\r\n+            cv2.putText(img, "Face Detected", (x, y-5),\r\n+                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255))\r\n+            cv2.putText(img, str(str(num_of_images)+" images captured"),\r\n+                        (x, y+h+20), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255))\r\n+            new_img = img[y:y+h, x:x+w]\r\n+        cv2.imshow("FaceDetection", img)\r\n+        key = cv2.waitKey(1) & 0xFF\r\n \r\n-                pass\r\n-            if key == ord("q") or key == 27 or num_of_images > 310:\r\n-                break\r\n-        cv2.destroyAllWindows()\r\n-        return num_of_images\r\n+        try:\r\n+            cv2.imwrite(str(path+"/"+str(num_of_images)+name+".jpg"), new_img)\r\n+            num_of_images += 1\r\n+        except:\r\n \r\n+            pass\r\n+        if key == ord("q") or key == 27 or num_of_images > 10:\r\n+            break\r\n+    cv2.destroyAllWindows()\r\n+    return num_of_images\r\ndiff --git a/nameslist.txt b/nameslist.txt\nindex e605024..5f8a285 100644\n--- a/nameslist.txt\n+++ b/nameslist.txt\n@@ -1 +1 @@\n-NO \n\\ No newline at end of file\n+                                                                     \n\\ No newline at end of file'